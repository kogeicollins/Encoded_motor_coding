
Encoded motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c83  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000712  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a3  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002953  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_1>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  8a:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Cmd>:
}
void lcd_print(const char *str) {
	while (*str) {
		LCD_Char(*str++);
	}
}
  92:	92 b3       	in	r25, 0x12	; 18
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	92 bb       	out	0x12, r25	; 18
  9e:	92 b3       	in	r25, 0x12	; 18
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	92 bb       	out	0x12, r25	; 18
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	92 bb       	out	0x12, r25	; 18
  aa:	00 00       	nop
  ac:	92 b3       	in	r25, 0x12	; 18
  ae:	9d 7f       	andi	r25, 0xFD	; 253
  b0:	92 bb       	out	0x12, r25	; 18
  b2:	32 e4       	ldi	r19, 0x42	; 66
  b4:	3a 95       	dec	r19
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Cmd+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Cmd+0x28>
  ba:	22 b3       	in	r18, 0x12	; 18
  bc:	30 e1       	ldi	r19, 0x10	; 16
  be:	83 9f       	mul	r24, r19
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	89 2b       	or	r24, r25
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	00 00       	nop
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	82 bb       	out	0x12, r24	; 18
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Cmd+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Cmd+0x52>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <LCD_Char>:
  e8:	92 b3       	in	r25, 0x12	; 18
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	28 2f       	mov	r18, r24
  ee:	20 7f       	andi	r18, 0xF0	; 240
  f0:	92 2b       	or	r25, r18
  f2:	92 bb       	out	0x12, r25	; 18
  f4:	92 b3       	in	r25, 0x12	; 18
  f6:	91 60       	ori	r25, 0x01	; 1
  f8:	92 bb       	out	0x12, r25	; 18
  fa:	92 b3       	in	r25, 0x12	; 18
  fc:	92 60       	ori	r25, 0x02	; 2
  fe:	92 bb       	out	0x12, r25	; 18
 100:	00 00       	nop
 102:	92 b3       	in	r25, 0x12	; 18
 104:	9d 7f       	andi	r25, 0xFD	; 253
 106:	92 bb       	out	0x12, r25	; 18
 108:	32 e4       	ldi	r19, 0x42	; 66
 10a:	3a 95       	dec	r19
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_Char+0x22>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_Char+0x28>
 110:	22 b3       	in	r18, 0x12	; 18
 112:	30 e1       	ldi	r19, 0x10	; 16
 114:	83 9f       	mul	r24, r19
 116:	c0 01       	movw	r24, r0
 118:	11 24       	eor	r1, r1
 11a:	92 2f       	mov	r25, r18
 11c:	9f 70       	andi	r25, 0x0F	; 15
 11e:	89 2b       	or	r24, r25
 120:	82 bb       	out	0x12, r24	; 18
 122:	82 b3       	in	r24, 0x12	; 18
 124:	82 60       	ori	r24, 0x02	; 2
 126:	82 bb       	out	0x12, r24	; 18
 128:	00 00       	nop
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	82 bb       	out	0x12, r24	; 18
 130:	83 ef       	ldi	r24, 0xF3	; 243
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Char+0x4c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Char+0x52>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <LCD_Init>:
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	81 bb       	out	0x11, r24	; 17
 142:	87 e8       	ldi	r24, 0x87	; 135
 144:	93 e1       	ldi	r25, 0x13	; 19
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_Init+0x8>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_Init+0xe>
 14c:	00 00       	nop
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 154:	88 e2       	ldi	r24, 0x28	; 40
 156:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 16c:	08 95       	ret

0000016e <LCD_String>:
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8c 01       	movw	r16, r24
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	03 c0       	rjmp	.+6      	; 0x184 <LCD_String+0x16>
 17e:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	f8 01       	movw	r30, r16
 186:	ec 0f       	add	r30, r28
 188:	fd 1f       	adc	r31, r29
 18a:	80 81       	ld	r24, Z
 18c:	81 11       	cpse	r24, r1
 18e:	f7 cf       	rjmp	.-18     	; 0x17e <LCD_String+0x10>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <__vector_1>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	83 9b       	sbis	0x10, 3	; 16
 1aa:	0a c0       	rjmp	.+20     	; 0x1c0 <__vector_1+0x26>
 1ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1b0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 1ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <__vector_1+0x38>
 1c0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1c4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 1ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_2>:
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	82 9b       	sbis	0x10, 2	; 16
 1f0:	0a c0       	rjmp	.+20     	; 0x206 <__vector_2+0x26>
 1f2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1f6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 200:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 204:	09 c0       	rjmp	.+18     	; 0x218 <__vector_2+0x38>
 206:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 20a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 214:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <pwm_init>:
 226:	87 b3       	in	r24, 0x17	; 23
 228:	8e 60       	ori	r24, 0x0E	; 14
 22a:	87 bb       	out	0x17, r24	; 23
 22c:	8a e6       	ldi	r24, 0x6A	; 106
 22e:	85 bd       	out	0x25, r24	; 37
 230:	13 bc       	out	0x23, r1	; 35
 232:	08 95       	ret

00000234 <set_motor_speed>:
 234:	83 bd       	out	0x23, r24	; 35
 236:	88 b3       	in	r24, 0x18	; 24
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	88 b3       	in	r24, 0x18	; 24
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	88 bb       	out	0x18, r24	; 24
 242:	08 95       	ret

00000244 <adc_init>:
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	87 b9       	out	0x07, r24	; 7
 248:	86 e8       	ldi	r24, 0x86	; 134
 24a:	86 b9       	out	0x06, r24	; 6
 24c:	08 95       	ret

0000024e <adc_read>:
 24e:	97 b1       	in	r25, 0x07	; 7
 250:	98 7f       	andi	r25, 0xF8	; 248
 252:	87 70       	andi	r24, 0x07	; 7
 254:	89 2b       	or	r24, r25
 256:	87 b9       	out	0x07, r24	; 7
 258:	86 b1       	in	r24, 0x06	; 6
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	86 b9       	out	0x06, r24	; 6
 25e:	36 99       	sbic	0x06, 6	; 6
 260:	fe cf       	rjmp	.-4      	; 0x25e <adc_read+0x10>
 262:	84 b1       	in	r24, 0x04	; 4
 264:	95 b1       	in	r25, 0x05	; 5
 266:	08 95       	ret

00000268 <lcd_print_int>:
void lcd_print_int(int value) {
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	60 97       	sbiw	r28, 0x10	; 16
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];
	itoa(value, buffer, 10);
 280:	4a e0       	ldi	r20, 0x0A	; 10
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	8e 01       	movw	r16, r28
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	b8 01       	movw	r22, r16
 28c:	0e 94 84 01 	call	0x308	; 0x308 <itoa>
	LCD_Char(buffer);
 290:	80 2f       	mov	r24, r16
 292:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>
}
 296:	60 96       	adiw	r28, 0x10	; 16
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <main>:
	// Initialize LCD
	//LCD_DDRD |= (1 << LCD_RS) | (1 << LCD_EN); // Set control pins as output
	//LCD_DDRC |= (1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7); // Set data pins as output
	//lcd_init();

	LCD_Init(); /* Initialize LCD */
 2ac:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Init>
	LCD_String("MSP II:EMT 3202"); /* Write a string on 1st line of LCD*/
 2b0:	80 e6       	ldi	r24, 0x60	; 96
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_String>
	LCD_Cmd(0xC0); /* Go to 2nd line*/
 2b8:	80 ec       	ldi	r24, 0xC0	; 192
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
	lcd_print_int(1234);
 2be:	82 ed       	ldi	r24, 0xD2	; 210
 2c0:	94 e0       	ldi	r25, 0x04	; 4
 2c2:	0e 94 34 01 	call	0x268	; 0x268 <lcd_print_int>
	// Initialize motor control
	pwm_init();
 2c6:	0e 94 13 01 	call	0x226	; 0x226 <pwm_init>
	adc_init();
 2ca:	0e 94 22 01 	call	0x244	; 0x244 <adc_init>
	
	// Initialize encoder
	DDRD &= ~((1 << ENCODER_A_PIN) | (1 << ENCODER_B_PIN)); // Set encoder pins as input
 2ce:	81 b3       	in	r24, 0x11	; 17
 2d0:	83 7f       	andi	r24, 0xF3	; 243
 2d2:	81 bb       	out	0x11, r24	; 17
	MCUCR |= (1 << ISC00) | (1 << ISC10); // Trigger on any logical change
 2d4:	85 b7       	in	r24, 0x35	; 53
 2d6:	85 60       	ori	r24, 0x05	; 5
 2d8:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1); // Enable external interrupts INT0 and INT1
 2da:	8b b7       	in	r24, 0x3b	; 59
 2dc:	80 6c       	ori	r24, 0xC0	; 192
 2de:	8b bf       	out	0x3b, r24	; 59
	sei(); // Enable global interrupts
 2e0:	78 94       	sei
//LCD_String("new line"); /* Write string on 2nd line*/
//LCD_String("PWM: ");
//LCD_Cmd(0XC0);
//lcd_print_int(speed);
	while (1) {
		uint16_t adc_value = adc_read(0); // Read potentiometer value from PA0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 27 01 	call	0x24e	; 0x24e <adc_read>
		uint8_t speed = adc_value / 4; // Convert ADC value to 0-255 range for PWM
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
		set_motor_speed(speed);
 2f0:	0e 94 1a 01 	call	0x234	; 0x234 <set_motor_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	2f e9       	ldi	r18, 0x9F	; 159
 2f6:	86 e8       	ldi	r24, 0x86	; 134
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x4e>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x58>
 304:	00 00       	nop
 306:	ed cf       	rjmp	.-38     	; 0x2e2 <main+0x36>

00000308 <itoa>:
 308:	45 32       	cpi	r20, 0x25	; 37
 30a:	51 05       	cpc	r21, r1
 30c:	20 f4       	brcc	.+8      	; 0x316 <itoa+0xe>
 30e:	42 30       	cpi	r20, 0x02	; 2
 310:	10 f0       	brcs	.+4      	; 0x316 <itoa+0xe>
 312:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__itoa_ncheck>
 316:	fb 01       	movw	r30, r22
 318:	10 82       	st	Z, r1
 31a:	cb 01       	movw	r24, r22
 31c:	08 95       	ret

0000031e <__itoa_ncheck>:
 31e:	bb 27       	eor	r27, r27
 320:	4a 30       	cpi	r20, 0x0A	; 10
 322:	31 f4       	brne	.+12     	; 0x330 <__itoa_ncheck+0x12>
 324:	99 23       	and	r25, r25
 326:	22 f4       	brpl	.+8      	; 0x330 <__itoa_ncheck+0x12>
 328:	bd e2       	ldi	r27, 0x2D	; 45
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	0c 94 9b 01 	jmp	0x336	; 0x336 <__utoa_common>

00000334 <__utoa_ncheck>:
 334:	bb 27       	eor	r27, r27

00000336 <__utoa_common>:
 336:	fb 01       	movw	r30, r22
 338:	55 27       	eor	r21, r21
 33a:	aa 27       	eor	r26, r26
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	aa 1f       	adc	r26, r26
 342:	a4 17       	cp	r26, r20
 344:	10 f0       	brcs	.+4      	; 0x34a <__utoa_common+0x14>
 346:	a4 1b       	sub	r26, r20
 348:	83 95       	inc	r24
 34a:	50 51       	subi	r21, 0x10	; 16
 34c:	b9 f7       	brne	.-18     	; 0x33c <__utoa_common+0x6>
 34e:	a0 5d       	subi	r26, 0xD0	; 208
 350:	aa 33       	cpi	r26, 0x3A	; 58
 352:	08 f0       	brcs	.+2      	; 0x356 <__utoa_common+0x20>
 354:	a9 5d       	subi	r26, 0xD9	; 217
 356:	a1 93       	st	Z+, r26
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	79 f7       	brne	.-34     	; 0x33a <__utoa_common+0x4>
 35c:	b1 11       	cpse	r27, r1
 35e:	b1 93       	st	Z+, r27
 360:	11 92       	st	Z+, r1
 362:	cb 01       	movw	r24, r22
 364:	0c 94 b4 01 	jmp	0x368	; 0x368 <strrev>

00000368 <strrev>:
 368:	dc 01       	movw	r26, r24
 36a:	fc 01       	movw	r30, r24
 36c:	67 2f       	mov	r22, r23
 36e:	71 91       	ld	r23, Z+
 370:	77 23       	and	r23, r23
 372:	e1 f7       	brne	.-8      	; 0x36c <strrev+0x4>
 374:	32 97       	sbiw	r30, 0x02	; 2
 376:	04 c0       	rjmp	.+8      	; 0x380 <strrev+0x18>
 378:	7c 91       	ld	r23, X
 37a:	6d 93       	st	X+, r22
 37c:	70 83       	st	Z, r23
 37e:	62 91       	ld	r22, -Z
 380:	ae 17       	cp	r26, r30
 382:	bf 07       	cpc	r27, r31
 384:	c8 f3       	brcs	.-14     	; 0x378 <strrev+0x10>
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
